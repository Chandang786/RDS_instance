# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the main branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }} checkign

name: 'PROJET_TERA'

on:
  push:
    branches:
    - main
    paths:
      - infra/**
      - module/**

  pull_request:
  

permissions:
  contents: read

jobs:
  project:
    name: 'Myfirst_Project'
    runs-on: self-hosted
    env:
      working-directory: RDS_instance/infra/
    

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
    



    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.access_key }}
        aws-secret-access-key: ${{ secrets.secret_key }}
        aws-region: us-west-2


    #print secret values
    - name: SHow Path
      run: |
        pwd
        ls
      #working-directory: ${{ env.working-directory }}
        

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
        terraform init
      working-directory: ${{ env.working-directory }}

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: |
        terraform fmt 
      working-directory: ${{ env.working-directory }}

    # Generates an execution plan for Terraformm
    - name: Terraform Plan
      run: |
        terraform plan -var 'accesskey=${{ secrets.access_key }}' -var 'secret_key=${{ secrets.secret_key }}' -var 'password="SGterraformdemo1@chandanJOB"' -out tfplan.binary
      working-directory: ${{ env.working-directory }}
      
    - name: show plan
      run: terraform show
      working-directory: ${{ env.working-directory }}

    - name: Setup Infra cost
      uses:  infracost/actions/setup@v1
      with:
        api-key: ${{ secrets.INFRACOST_API_KEY }}

      # Generate Infracost JSON output, the following docs might be useful:
      # Multi-project/workspaces: https://www.infracost.io/docs/features/config_file
      # Combine Infracost JSON files: https://www.infracost.io/docs/features/cli_commands/#combined-output-formats
    - name: Generate Infracost JSON
      run: infracost breakdown --path plan.json --format json --out-file /tmp/infracost.json
      working-directory: ${{ env.working-directory }}        

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        cd infra/
        terraform apply -auto-approve -var 'accesskey=${{ secrets.access_key }}' -var 'secret_key=${{ secrets.secret_key }}' -var 'password="SGterraformdemo1"'
        ls
